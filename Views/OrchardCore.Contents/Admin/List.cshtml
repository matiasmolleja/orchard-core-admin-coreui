@using OrchardCore.ContentManagement;
@using OrchardCore.Contents.ViewModels;
@inject IContentManager ContentManager
@{
    var typeDisplayName = Model.TypeDisplayName;
    var pageTitle = T["Manage Content"];
    var createLinkText = T["Create New Content"];
    if (!string.IsNullOrWhiteSpace(typeDisplayName))
    {
        pageTitle = T["Manage {0} Content", (string)typeDisplayName];
        createLinkText = T["Create New {0}", (string)typeDisplayName];
    }

    IEnumerable<string> cultures = Model.Options.Cultures;


}

<zone name="PageTitle">
    <h1 class="page-title">@RenderTitleSegments(pageTitle)</h1>
 </zone>

<div class="container-fluid">

    <div class="card">
        <div class="card-header">
            @*<i class="fa fa-align-justify"></i>*@ @pageTitle
        </div>
        <div class="card-body">


            @using (Html.BeginForm())
            {
                @*<fieldset class="bulk-actions">
                        <label><input type="checkbox" class="check-all" />@T["Select all"]</label>@T[" | "]
                        <label for="publishActions">@T["Actions:"]</label>
                        <select id="publishActions" name="Options.BulkAction">
                            @Html.SelectOption((ContentsBulkAction)Model.Options.BulkAction, ContentsBulkAction.None, T("Choose action...").ToString())
                            @Html.SelectOption((ContentsBulkAction)Model.Options.BulkAction, ContentsBulkAction.PublishNow, T("Publish Now").ToString())
                            @Html.SelectOption((ContentsBulkAction)Model.Options.BulkAction, ContentsBulkAction.Unpublish, T("Unpublish").ToString())
                            @Html.SelectOption((ContentsBulkAction)Model.Options.BulkAction, ContentsBulkAction.Remove, T("Delete").ToString())
                        </select>
                        <button type="submit" name="submit.BulkEdit" value="yes">@T("Apply")</button>
                    </fieldset>
                    <fieldset class="bulk-actions">
                        <label for="filterResults" class="bulk-filter">@T("Show")</label>
                        <select id="filterResults" name="Options.SelectedFilter">
                            @Html.SelectOption((string)Model.Options.SelectedFilter, "", T("any (show all)").ToString())
                            @foreach (var filterOption in Model.Options.FilterOptions) {
                                @Html.SelectOption((string)Model.Options.SelectedFilter, (string)filterOption.Key, (string)filterOption.Value)
                            }
                        </select>

                        @if (cultures.Count() > 1) {
                            <label for="filterCultures" class="bulk-culture">@T("Culture")</label>
                            <select id="filterCultures" name="Options.SelectedCulture">
                                @Html.SelectOption((string)Model.Options.SelectedCulture, "", T("any (show all)").ToString())
                                @foreach (string culture in cultures) {
                                    @Html.SelectOption((string)Model.Options.SelectedCulture, culture, System.Globalization.CultureInfo.GetCultureInfo(culture).DisplayName)
                                }
                            </select>
                        }

                        <label for="orderResults" class="bulk-order">@T("Ordered by")</label>
                        <select id="orderResults" name="Options.OrderBy">
                            @Html.SelectOption((ContentsOrder)Model.Options.OrderBy, ContentsOrder.Created, T("recently created").ToString())
                            @Html.SelectOption((ContentsOrder)Model.Options.OrderBy, ContentsOrder.Modified, T("recently modified").ToString())
                            @Html.SelectOption((ContentsOrder)Model.Options.OrderBy, ContentsOrder.Published, T("recently published").ToString())
                        </select>
                        <label for="contentResults" class="bulk-order">@T("Filter by")</label>
                        <select id="contentResults" name="Options.ContentsStatus">
                            @Html.SelectOption((ContentsStatus)Model.Options.ContentsStatus, ContentsStatus.Owner, T("owned by me").ToString())
                            @Html.SelectOption((ContentsStatus)Model.Options.ContentsStatus, ContentsStatus.Latest, T("latest").ToString())
                            @Html.SelectOption((ContentsStatus)Model.Options.ContentsStatus, ContentsStatus.Published, T("published").ToString())
                            @Html.SelectOption((ContentsStatus)Model.Options.ContentsStatus, ContentsStatus.Draft, T("unpublished").ToString())
                            @Html.SelectOption((ContentsStatus)Model.Options.ContentsStatus, ContentsStatus.AllVersions, T("all versions").ToString())
                        </select>
                        <button type="submit" name="submit.Filter" value="yes please">@T("Apply")</button>
                    </fieldset>*@


                <ul class="list-group">
                    @foreach (var contentItemSummary in Model.ContentItems)
                    {
                        <li class="list-group-item">
                            @await DisplayAsync(contentItemSummary)
                        </li>
                    }
                </ul>

                @await DisplayAsync(Model.Pager)
            }
        </div>
    </div>
</div>